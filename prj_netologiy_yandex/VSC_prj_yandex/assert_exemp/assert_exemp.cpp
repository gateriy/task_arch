п»ї// assert_exemp.cpp : Р­С‚РѕС‚ С„Р°Р№Р» СЃРѕРґРµСЂР¶РёС‚ С„СѓРЅРєС†РёСЋ "main". Р—РґРµСЃСЊ РЅР°С‡РёРЅР°РµС‚СЃСЏ Рё Р·Р°РєР°РЅС‡РёРІР°РµС‚СЃСЏ РІС‹РїРѕР»РЅРµРЅРёРµ РїСЂРѕРіСЂР°РјРјС‹.

#include <iostream>

#define NDEBUG // РћР±СЉСЏРІР»СЏРµРј РјР°РєСЂРѕСЃ NDEBUG

/*Р—Р°РїСѓСЃС‚РёРј РїСЂРѕРіСЂР°РјРјСѓ Рё СѓРІРёРґРёРј, С‡С‚Рѕ РјР°РєСЂРѕСЃ assert РЅРµ СЃСЂР°Р±РѕС‚Р°Р». 
Р”РµР»Рѕ РІ С‚РѕРј, С‡С‚Рѕ РјС‹ РѕР±СЉСЏРІРёР»Рё РјР°РєСЂРѕСЃ NDEBUG РїРµСЂРµРґ РїРѕРґРєР»СЋС‡РµРЅРёРµРј С„Р°Р№Р»Р° cassert. 
РћРїСЂРµРґРµР»РµРЅРёРµ РјР°РєСЂРѕСЃР° assert Р·Р°РІРёСЃРёС‚ РѕС‚ РјР°РєСЂРѕСЃР° NDEBUG, РєРѕС‚РѕСЂС‹Р№ РїРѕ СѓРјРѕР»С‡Р°РЅРёСЋ РЅРµ 
РѕР±СЉСЏРІР»РµРЅ РІ СЃС‚Р°РЅРґР°СЂС‚РЅРѕР№ Р±РёР±Р»РёРѕС‚РµРєРµ. Р•СЃР»Рё РѕР±СЉСЏРІРёС‚СЊ NDEBUG РїРµСЂРµРґ РїРѕРґРєР»СЋС‡РµРЅРёРµРј С„Р°Р№Р»Р° <cassert>,  
assert РЅРµ Р±СѓРґРµС‚ РґРµР»Р°С‚СЊ РЅРёС‡РµРіРѕ. 
Р­С‚Рѕ РїРѕР·РІРѕР»СЏРµС‚ РѕРіСЂР°РЅРёС‡РёС‚СЊ РёСЃРїРѕР»СЊР·РѕРІР°РЅРёРµ РјР°РєСЂРѕСЃР° assert РѕС‚Р»Р°РґРѕС‡РЅС‹РјРё РІРµСЂСЃРёСЏРјРё 
РїСЂРѕРіСЂР°РјРјС‹ Рё РѕС‚РєР»СЋС‡РёС‚СЊ РїСЂРѕРІРµСЂРєРё РІ С„РёРЅР°Р»СЊРЅРѕР№ СЃР±РѕСЂРєРµ РїСЂРѕРіСЂР°РјРјС‹.

РўРµСЃС‚С‹ РґР»СЏ C++ РїРёС€СѓС‚, РёСЃРїРѕР»СЊР·СѓСЏ РЅРµ С‚РѕР»СЊРєРѕ РјР°РєСЂРѕСЃ assert. 
РЎСѓС‰РµСЃС‚РІСѓСЋС‚ С†РµР»С‹Рµ С„СЂРµР№РјРІРѕСЂРєРё, С‚Р°РєРёРµ РєР°Рє Google Test, Boost.Test, Catch2. 
РќР° РїСЂР°РєС‚РёРєРµ РґР»СЏ СЂР°Р·СЂР°Р±РѕС‚РєРё С‚РµСЃС‚РѕРІ РїСЂРёРјРµРЅСЏСЋС‚ С„СЂРµР№РјРѕСЂРє, Р° РјР°РєСЂРѕСЃ assert РѕСЃС‚Р°РІР»СЏСЋС‚, 
С‡С‚РѕР±С‹ РїСЂРѕРІРµСЂРёС‚СЊ РёРЅРІР°СЂРёР°РЅС‚С‹ РІ РѕС‚Р»Р°РґРѕС‡РЅС‹С… РІРµСЂСЃРёСЏС… РїСЂРѕРіСЂР°РјРјС‹. РњС‹ РїРѕРєР°Р¶РµРј, РєР°Рє СЌС‚Рѕ СЂР°Р±РѕС‚Р°РµС‚, 
СЂР°Р·РѕР±СЂР°РІ СѓСЃС‚СЂРѕР№СЃС‚РІРѕ РЅР°С€РµРіРѕ С‚РµСЃС‚РѕРІРѕРіРѕ С„СЂРµР№РјРІРѕСЂРєР°.*/

#include <cassert>
#include <cstdlib>
#include <string>

using namespace std;

// РџСЂРё РїРѕРјРѕС‰Рё РґРёСЂРµРєС‚РёРІС‹ #define РѕР±СЉСЏРІР»СЏРµС‚СЃСЏ РјР°РєСЂРѕСЃ GREETING
//#define GREETING cout << "Hello, friend"s << endl

/*Р’ C++ РїРµСЂРµРґ РєРѕРјРїРёР»СЏС†РёРµР№ РїСЂРѕРёСЃС…РѕРґРёС‚ РїСЂРµРїСЂРѕС†РµСЃСЃРёРЅРі вЂ” РѕР±СЂР°Р±РѕС‚РєР° РёСЃС…РѕРґРЅРѕРіРѕ РєРѕРґР°. 
РќР° СЌС‚РѕРј СЌС‚Р°РїРµ РјР°РєСЂРѕСЃС‹ Р·Р°РјРµРЅСЏСЋС‚СЃСЏ РЅР° СЃРѕРѕС‚РІРµС‚СЃС‚РІСѓСЋС‰РёРµ РёРј Р·РЅР°С‡РµРЅРёСЏ. РќРµРєРѕС‚РѕСЂС‹Рµ РјР°РєСЂРѕСЃС‹, 
РЅР°РїСЂРёРјРµСЂ assert, РѕР±СЉСЏРІР»РµРЅС‹ РІ СЃС‚Р°РЅРґР°СЂС‚РЅРѕР№ Р±РёР±Р»РёРѕС‚РµРєРµ, РґСЂСѓРіРёРµ РІСЃС‚СЂРѕРµРЅС‹ РЅР°РїСЂСЏРјСѓСЋ РІ РєРѕРјРїРёР»СЏС‚РѕСЂ. 
РЎРµР№С‡Р°СЃ РЅР°СЃ РёРЅС‚РµСЂРµСЃСѓСЋС‚ РІСЃС‚СЂРѕРµРЅРЅС‹Рµ:
__FILE__ вЂ” РІРјРµСЃС‚Рѕ РЅРµРіРѕ РїСЂРµРїСЂРѕС†РµСЃСЃРѕСЂ РІСЃС‚Р°РІР»СЏРµС‚ РІ С‚РµРєСЃС‚ РїСЂРѕРіСЂР°РјРјС‹ РёРјСЏ С‚РµРєСѓС‰РµРіРѕ С„Р°Р№Р»Р° РёСЃС…РѕРґРЅРѕРіРѕ РєРѕРґР°;
__LINE__ вЂ” РІРјРµСЃС‚Рѕ РЅРµРіРѕ РїСЂРµРїСЂРѕС†РµСЃСЃРѕСЂ РІСЃС‚Р°РІР»СЏРµС‚ РЅРѕРјРµСЂ С‚РµРєСѓС‰РµР№ СЃС‚СЂРѕРєРё;
__FUNCTION__ вЂ” РїСЂРµРїСЂРѕС†РµСЃСЃРѕСЂ Р·Р°РјРµРЅСЏРµС‚ РµРіРѕ РЅР° РёРјСЏ С‚РµРєСѓС‰РµР№ С„СѓРЅРєС†РёРё.
Р­С‚Рё РјР°РєСЂРѕСЃС‹ Рё РёСЃРїРѕР»СЊР·СѓРµС‚ С„СЂРµР№РјРІРѕСЂРє. Р’РѕС‚ РєР°Рє РѕРЅРё СЂР°Р±РѕС‚Р°СЋС‚:*/

void PrintDiagnosticInformation() {
    cout << "Function name: "s << __FUNCTION__ << endl;
    cout << "File name: "s << __FILE__ << endl;
    cout << "Line number: "s << __LINE__ << endl;
    cout << "Line number: "s << __LINE__ << endl;
}

template <typename T, typename U>
void AssertEqual(const T& t, const U& u, const string& hint) {
    if (t != u) {
        // Р’РєР»СЋС‡Р°РµРј СЂРµР¶РёРј РІС‹РІРѕРґР° Р·РЅР°С‡РµРЅРёР№ С‚РёРїР° bool РІ РІРёРґРµ true Рё false
        cout << boolalpha;
        cout << "Assertion failed: "s << t << " != "s << u << "."s;  
        cout << " Hint: "s << hint;

        cout << endl;
        abort();
    }
}

template <typename T, typename U>
void AssertEqualImpl(const T& t, const U& u, const string& t_str, const string& u_str, const string& file,
    const string& func, unsigned line, const string& hint) {
    if (t != u) {
        cout << boolalpha;
        cout << file << "("s << line << "): "s << func << ": "s;
        cout << "ASSERT_EQUAL("s << t_str << ", "s << u_str << ") failed: "s;
        cout << t << " != "s << u << "."s;
        if (!hint.empty()) {
            cout << " Hint: "s << hint;
        }
        cout << endl;
        abort();
    }
}

#define ASSERT_EQUAL(a, b) AssertEqualImpl((a), (b), #a, #b, __FILE__, __FUNCTION__, __LINE__, ""s)

#define ASSERT_EQUAL_HINT(a, b, hint) AssertEqualImpl((a), (b), #a, #b, __FILE__, __FUNCTION__, __LINE__, (hint))


int Add(int x, int y) {
    return x * y;
}

//AssertEqual(Add(2, 3), 5);
//AssertEqual(Sort(vector<int>{1, 4, 2}), vector<int>{1, 2, 4});
  



int main()
{
    const string greeting = "Hello"s;
    const string hello = "hello"s;


    AssertEqual(hello.length(), (double)5, "123123123"s);

    // Р­С‚Р° РїСЂРѕРІРµСЂРєР° РЅРµ СЃСЂР°Р±РѕС‚Р°РµС‚
    AssertEqual(2 + 2, 7, "Add() must add its arguments"s);

    // РћС€РёР±РєР° РІ СѓСЃР»РѕРІРёРё РґРѕРїСѓС‰РµРЅР° РЅР°РјРµСЂРµРЅРЅРѕ, С‡С‚РѕР±С‹ РїСЂРѕРґРµРјРѕРЅСЃС‚СЂРёСЂРѕРІР°С‚СЊ СЂР°Р±РѕС‚Сѓ AssertEqual
    AssertEqual(greeting.empty(), true, "Greeting must be non-empty"s);
}